-----------------------------------------------------------------
Los enemigos se crean en la zona que existe entre la cuarta y quinta plataforma, debajo de la más alta.
Si quisiera crear un enemigo en cada nuevo nivel (es decir, en level = 1, luego level = 2, luego level = 3, etc), podría
pasar lo siguiente:
Cuando salto muy rápido entre plataformas, si llego a la plataforma 3 sin que la 1 se haya reposicionado, se crean dos
enemigos en la misma zona (a veces superpuestos un poco).
Este problema se observa mejor cuando comienza el juego y toco la primer plataforma (level = 1). Allí se crea un enemigo
entre la cuarta y quinta plataforma. Cuando salto y hago contacto con la segunda plataforma (level = 2), se crea otro enemigo
pero como aún no se hizo reposition de la plataforma 1, este se crea en la misma zona lugar del anterior.
Esto pasaría si yo creara enemigos en cada nuevo nivel, lo cual no voy a hacer porque el juego los crea cada tanto para no
aburrir.
El único que sabe que ganó el nivel es el Jumper dentro de onSuccessfulJump.
El Jumper avisa a PlayScreen que pasó de nivel para que PlayScreen en gameResults tome acciones (como debe ser, pues allí se
debe controlar "nuevo nivel", "game over", etc.).
Es allí que yo debería esperar a que haya un reposition de plataforma para hacer gameWorld.addLevel().
El único que sabe cuando una plataforma se reposicionó es PlatformController y no quisiera agregar un aviso a PlayScreen desde
allí dentro (es decir, setear un booleano de playscreen "isLevelComplete2") para sincronizar gameResults.
-----------------------------------------------------------------
    private void stateKnockBack(float deltaTime) {
        updateSpritePosition(deltaTime);
        holdEnemy();

        knockBackTime += deltaTime;
        if (knockBackTime > KNOCK_BACK_SECONDS) {
            body.setLinearVelocity(0.0f, 0.0f);
            currentState = State.EXPLOSION;
            stateTime = 0;
        }
    }
Antes de setear el esado EXPLOSION, debería setear los bounds con el nuevo tamaño del sprite y el setRegion explosion. Porque al cambiar estado
en el draw ya se cambia el color del knockback a default y me está dibujando el pájaro verde (antes de explotar).

Lo mismo cuando termina de explotar y pasa a SPLAT. Ahí hay una inconsistencia entre el estado y el sprite (setRegion) que dibujo.

El algoritmo general sería en lugar de setear el cambio de estado, invocar a un metodo que se llame initExposion() que hace setbounds, setRegion y setea estado.
De esa manera logro que cada estado tenga un paso previo de inicialización sacándome los booleanos init de encima.
Si hago un próximo juego, usar esta técnica.
-----------------------------------------------------------------
Otro probelma que tengo es el manejo de múltiples pantallas superpuestas (infoScreen).
Si algunas son modal y otras no se complica.
Puedo jugar como hice en este juego con Gdx.input.setInputProcessor(..), pero si tengo un stack de pantallas volver al input processor anterior parece
complicado. Existe getInputProcessor pero no lo probé.
Debería hacer un manager o investigar el uso de window en libgdx que parecería ser la manera.