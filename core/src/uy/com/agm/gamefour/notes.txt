- Debo usar una skin
- para la proxima, no poner metodos getWidth() y getHeight() dentro de la clase AssetMiSprite porque me obliga a tener una instancia de
AssetMiSprite para poder consultar su ancho y alto. Mejor hacerlo como antes, con constantes públicas.
HACER
- hacer un help o algo (hold and release to jump. Tap on the screen to get this little nosy bird out)
- pull request (pr) a Typinglabel
- investigar por que en mobile browsers el audio se corta.
- agregar la palabra "Excelsior!", "Terrific"
- arreglar el botón verde
- hacer un help dinamico con un helpscreen y un helpgameworld

DESEABLE PARA LIBERAR
- a medida que pasa el tiempo (level 50) la brecha se agranda entre las texturas.
- agregar mas fondos

OTROS
- hacer un skin
- Poner una zona de salto perfecto. Si el pajaro cae justo ahi (su x en medio de la plataforma + delta) saco algun cartel y/o doy
puntos extra.
- MAS NADA, LA FUNCIONALIDAD ES ESA.

LECCIONES APRENDIDAS
--------------------
1) Primero existía ApplicationListener, todas las pantallas heredaban de allí.
Los métodos de ApplicationListener son:
create, resize, render, pause, resume, dispose.

Su ciclo de vida para android está descripto acá:
https://github.com/libgdx/libgdx/wiki/The-life-cycle

Luego libgdx inventó la clase Game para ayudar a los programadores a moverse entre pantallas.
Entonces ahora las aplicaciones pueden extender Game para usar sus métodos setScreen y getScreen.
Junto con el desarrollo de la clase Game vino la interfaz Screen.
Screen agrega 2 métodos nuevos que utiliza la clase Game: show y hide.
Entonces la interfaz playScreen tiene: show, hide, create, resize, render, pause, resume, dispose.
Si yo heredo de Game, cuando uso su "setScreen" la clase Game hace lo siguiente:
- invoca al método hide de la pantalla vieja.
- invoca al método show (automáticamente libgdx antes invocó al método create) y luego resize de la pantalla nueva.

Game invoca a hide (y no a dispose) supongo para dar más flexibilidad al manejo de pantallas.

Yo para hacer las transiciones necesito reescribir toda la clase Game. Entonces creé una nueva llamada DirectGame que básicamente
reutiliza la mecánica de Game (es decir, usa los métodos show y hide con el mismo propósito).
La única diferencia (además de ejecutar la transición) es que necesito pausar la pantalla mientras la transición se hace y al finalizar la
transición invoco al método resume.
Para no usar el método pause y dar más flexibilidad, definí un método nuevo llamado stop.

2) Para ejecutar la versión html: Ir al directorio del juego y ejecutar gradlew html:dist. En GameFour\html\build\dist quedó
la aplicación a deployar. Para ejecutarla en xampp copiar ese contenido dentro de C:\xampp\htdocs\Alvaro\juego y luego
levantar el apache y el tomcat del xampp y ejecutar http://localhost/Alvaro/juego/index.html

3) Para usar el editor de partículas mejor ejecutar el editor desde Android Studio ya que lo ejecuta desde la versión de libgdx que tengo.
Para ello seguir este link https://www.gamefromscratch.com/post/2014/11/03/LibGDX-Tutorial-Part-15-Particles-Part-One-2D-Particles.aspx.
Con respecto al efecto (archivo .p), lo importante es que arriba del todo al abrirlo diga "Pixel per meter 100" (mi PPM) y "zoom level = 1"
asi puedo ver en tamaño real el efecto.
Todas las dimensiones deben ir en metros (ej: spawn width, X size, etc.), lo mismo con las velocidades.
Estas propiedades son por cada emiter, si hay más de un emiter debo seleccionarlo para editar sus propiedades.

4) Para incluir TypingLabel y poder usarla en html hice lo siguiente:
En html/src/GdxDefinition.gwt.xml agregué:
<inherits name='TypingLabel' />

Luego dentro de GameFour/core/src cree un archivo llamado TypingLabel.gwt.xml cuyo contenido es el siguiente:
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC "-//Google Inc.//DTD Google Web Toolkit trunk//EN" "http://google-web-toolkit.googlecode.com/svn/trunk/distro-source/core/src/gwt-module.dtd">
<module>
<source path="com/rafaskoberg/gdx/typinglabel" /> <--- RUTA EN DONDE ESTÁN LOS FUENTES PARA QUE GWT GENERE JAVASCRIPT A PARTIR DE ELLOS.
</module>

Me bajé los fuentes desde este link:
https://github.com/rafaskb/typing-label
Es necesario bajar los fuentes porque los voy a tener que modificar para hacerlos compatibles con GWT.

Copié los fuentes dentro de GameFour/core/src.
Líneas 35 y 36 de TypingLabel antes:
private final ObjectMap<String, String> variables = new ObjectMap<>();
protected final Array<TokenEntry> tokenEntries = new Array<>();
Línes 35 y 36 de TypingLabel después:
private final ObjectMap<String, String> variables = new ObjectMap<String, String>();
protected final Array<TokenEntry> tokenEntries = new Array<TokenEntry>();

Ver reflection en libgdx: https://github.com/libgdx/libgdx/wiki/Reflection
Línea 448 de TypingLabel antes:
antes decía if (effectClass.isAssignableFrom(effect.getClass())) {
Línea 448 de TypingLabel después:
ahora dice if (ClassReflection.isAssignableFrom(effectClass.getClass(), effect.getClass())) {

Estos fuentes ahora se van a usar para TODOS LOS MODULOS: android, desktop y html.
No hay forma de usar esos fuentes solo para html y para android/desktop usar la versión oficial porque luego al generar la versión firmada (release)
obtengo un error de inclusión doble de clases:

Warning:Exception while processing task java.io.IOException: Can't write
[C:\Alvaro\Develop\Android\20180915\AndroidStudioProjects\GameFour\android\build\intermediates\transforms\proguard\release\jars\3\1f\main.jar]
(Can't read [C:\Alvaro\Develop\Android\20180915\AndroidStudioProjects\GameFour\core\build\libs\core-build-20181110182601-1.0.0.jar(;;;;;;**.class)]
(Duplicate zip entry [com/a/a/a/a/a.class == core-build-20181110182601-1.0.0.jar:com/rafaskoberg/gdx/typinglabel/effects/Effect.class]))
Error:Execution failed for task ':android:transformClassesAndResourcesWithProguardForRelease'.
> Job failed, see logs for details

Con esto, TypingLabel funciona en desktop y android pero todavía no terminamos para html.

TypingLabel usa java.util.regex package que no está soportada por GWT, por lo tanto al generar html (gradlew html:dist) da error en la clase Parser.
Ver incidente ttps://github.com/rafaskb/typing-label/issues/1
La solución es usar la librería RegExodus.
Esta librería la bajo (al igual que su fuente) y es soportada por GWT.
Dentro del jar tiene un package regexodus.emu.java.util.regex con clases que emulan java.util.regex (de jse) y además ya contiene el
archivo regexodus.gwt.xml por lo que usarla es muy transparente.

Para usarla entonces hago lo siguiente:
Dentro de GameFour/build.gradle
   ext {
       appName = "GameFour"
       gdxVersion = '1.9.8'
       roboVMVersion = '2.3.1'
       box2DLightsVersion = '1.4'
       ashleyVersion = '1.7.0'
       aiVersion = '1.8.0'
       admobVersion = '15.0.1'
       ---> regexodusVersion = '0.1.10'
   }

project(":core") {
   apply plugin: "java"

   dependencies {
       compile "com.badlogicgames.gdx:gdx:$gdxVersion"
       compile "com.badlogicgames.gdx:gdx-box2d:$gdxVersion"
       ---> compile "com.github.tommyettinger:regexodus:$regexodusVersion"
       ---> compile "com.github.tommyettinger:regexodus:$regexodusVersion:sources"

       // To use external jars just place them in a directory called GameThree/libs
       compile fileTree(dir: '../libs', include: ['*.jar'])
   }
}

En html/src/GdxDefinition.gwt.xml agregué:
<inherits name='regexodus' />

Con esto, lo que hago es referenciar al archivo regexodus.gwt.xml que está dentro de los sources bajados (que quedaron dentro de External Libraries/regexodus-0.1.10-sources).
Ese archivo tiene el mapeo a los .java necesarios para que GWT genere javascript a partir de ellos.
Luego de todo esto, ya estaría en condiciones de usar TypingLabel en html.

5) Para hacer un "Pull request" ver este video:
https://www.youtube.com/watch?v=dSl_qnWO104

Básicamente es hacer un fork del proyecto en cuestión y luego esta secuencia de comandos:

mkdir carpeta
cd carpeta
git clone URL COPIADA LUEGO DEL FORK PRESIONANDO EL BOTÓN "CLONE OR DOWNLOAD"
cd elProyecto
- luego edito los fuentes con notepad o algún ide
git status 
- veo lo que toqué en rojo
git add .
git status
- veo que lo que toqué haya quedado en verde
git commit -m "Algún comentario"
git push origin  master 
- se sube a mi fork en github y puedo verlo allí
Luego en hitHub uso el botón New pull request, selecciono las branches a comparar (la del dueño del proyecto y la mia) y le doy comparar.
Relleno el formulario con algún comentario y listo.
